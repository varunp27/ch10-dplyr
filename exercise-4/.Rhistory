install.packages("nycflights13")
library(nycflights13)
library(nycflights13)
library(nycflights13)
library(nycflights13)
library("nycflights13")
nrows(flights)
nrow(flights)
ncol(flight)
ncol(flights)
row.names(flights)
col.names(flights)
colnames(flights)
View(flights)
mutate(flights, delay_arriving = arr_delay - dep_delay)
library("dplyr")
mutate(flights, delay_arriving = arr_delay - dep_delay)
library("dplyr")
mutate(flights, delay_arriving = arr_delay - dep_delay)
library("dplyr")
mutate(flights, delay_arriving = arr_delay - dep_delay)
library("dplyr")
mutate(flights, delay_arriving = arr_delay - dep_delay)
View(mutate(flights, delay_arriving = arr_delay - dep_delay))
arrange(desc(delay_arriving))
delay_during_flight <- mutate(flights, delay_arriving = arr_delay - dep_delay) %>%
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(desc(delay_arriving))
delay_during_flight <- arrange(delay_during_flight, desc(delay_arriving))
View(delay_during_flight)
delay_flight_pipe <- flights %>%
mutate(delay_arriving = arr_delay - dep_delay) %>%
arrange(desc(delay_arriving))
View(delay_flight_pipe)
hist(delay_during_flight$delay_arriving)
mean(delay_during_flight$delay_arriving, na.rm = TRUE)
jfk_sea <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
select(origin, dest, delay_arriving)
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
library("dplyr")
delay_during_flight <- mutate(flights, delay_arriving = arr_delay - dep_delay) %>%
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
delay_during_flight <- arrange(delay_during_flight, desc(delay_arriving))
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
delay_flight_pipe <- flights %>%
mutate(delay_arriving = arr_delay - dep_delay) %>%
arrange(desc(delay_arriving))
# Make a histogram of the amount of time gained using the `hist()` function
hist(delay_during_flight$delay_arriving)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(delay_during_flight$delay_arriving, na.rm = TRUE)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
jfk_sea <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
select(origin, dest, delay_arriving)
jfk_sea <- delay_during_flight %>%
filter(origin == "JFK", dest == "SEA") %>%
select(origin, dest, delay_arriving)
# On average, did flights to SeaTac gain or loose time?
summarize(to_sea, mean = mran(time_gained, na.rm = TRUE))
# On average, did flights to SeaTac gain or loose time?
summarize(jfk_sea, mean = mran(time_gained, na.rm = TRUE))
# On average, did flights to SeaTac gain or loose time?
summarize(jfk_sea, mean = mean(time_gained, na.rm = TRUE))
# On average, did flights to SeaTac gain or loose time?
summarize(jfk_sea, mean = mean(delay_arriving, na.rm = TRUE))
# (without showing any other data)
summary <- delay_during_flight %>%
filter(origin == "JFL", dest == "SEA") %>%
summarise(
avg_time = mean(delay_arriving, na.rm = TRUE)
min_time = min(delay_arriving, na.rm = TRUE)
max_time = max(delay_arriving, na.rm = TRUE)
)
# (without showing any other data)
summary <- delay_during_flight %>%
filter(origin == "JFL", dest == "SEA") %>%
summarise(
avg_time = mean(delay_arriving, na.rm == TRUE)
min_time = min(delay_arriving, na.rm == TRUE)
max_time = max(delay_arriving, na.rm == TRUE)
)
summary <- delay_during_flight %>%
filter(origin == "JFL", dest == "SEA") %>%
summarise(
avg_time = mean(air_time, na.rm == TRUE)
min_time = min(air_time, na.rm == TRUE)
max_time = max(air_time, na.rm == TRUE)
)
summary <- delay_during_flight %>%
filter(origin == "JFL", dest == "SEA") %>%
summarise(
avg_time = mean(air_time, na.rm = TRUE)
min_time = min(air_time, na.rm = TRUE)
max_time = max(air_time, na.rm = TRUE)
)
library(nycflights13)
library(dplyr)
View(flights)
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarise(mean(dep_delay))
View(dep_delay_by_month)
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarise(mean(dep_delay, na.rm = TRUE))
View(dep_delay_by_month)
max(dep_delay_by_month)
select(month, dep_delay_by_month)
select("month", dep_delay_by_month)
select(month, dep_delay_by_month)
select(month, dep_delay_by_month)
select(month, dep_delay_by_month)
select(month, dep_delay_by_month)
select(month, dep_delay_by_month)
select(month, dep_delay_by_month)
select(month, dep_delay_by_month)
select(month, dep_delay_by_month)
select(month, dep_delay_by_month)
select(month, dep_delay_by_month)
select(month, dep_delay_by_month)
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarise(mean(dep_delay, na.rm = TRUE)) %>%
select(max(dep_delay_by_month))
filter(dep_delay_by_month, delay = max(dep_delay_by_month)) %>%
select(month)
filter(dep_delay_by_month, delay == max(dep_delay_by_month)) %>%
select(month)
dep_delay_by_month <- flights %>%
group_by(month) %>%
summarise(avg = mean(dep_delay, na.rm = TRUE))
filter(dep_delay_by_month, delay == max(avg)) %>%
select(month)
filter(dep_delay_by_month, avg == max(avg)) %>%
select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create
# a scatterplot by passing that data frame to the 'plot()' function
plot(dep_delay_by_month)
flights %>%
group_by(dest) %>%
summarise(avg_arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(-avg_arr_delay)
